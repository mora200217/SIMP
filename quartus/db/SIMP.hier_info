|simp
clk => clk_div.CLK
clk => clock_divider[0].CLK
clk => clock_divider[1].CLK
clk => clock_divider[2].CLK
clk => clock_divider[3].CLK
clk => clock_divider[4].CLK
clk => clock_divider[5].CLK
clk => clock_divider[6].CLK
clk => clock_divider[7].CLK
scl <= i2c_master:i2c_master_uut.scl
sda <> sda
start => start.IN1
rst_n => rst_n.IN1
state_ind[0] <= i2c_master:i2c_master_uut.state_ind
state_ind[1] <= i2c_master:i2c_master_uut.state_ind
state_ind[2] <= i2c_master:i2c_master_uut.state_ind
state_ind[3] <= i2c_master:i2c_master_uut.state_ind
led <= <GND>
led_active <= <VCC>
led_inactive <= <GND>


|simp|i2c_master:i2c_master_uut
clk => scl.DATAB
clk => shift_reg[0].CLK
clk => shift_reg[1].CLK
clk => shift_reg[2].CLK
clk => shift_reg[3].CLK
clk => shift_reg[4].CLK
clk => shift_reg[5].CLK
clk => shift_reg[6].CLK
clk => shift_reg[7].CLK
clk => bit_count[0].CLK
clk => bit_count[1].CLK
clk => bit_count[2].CLK
clk => bit_count[3].CLK
clk => data_out[0]~reg0.CLK
clk => data_out[1]~reg0.CLK
clk => data_out[2]~reg0.CLK
clk => data_out[3]~reg0.CLK
clk => data_out[4]~reg0.CLK
clk => data_out[5]~reg0.CLK
clk => data_out[6]~reg0.CLK
clk => data_out[7]~reg0.CLK
clk => done~reg0.CLK
clk => busy~reg0.CLK
clk => sda_enable_master.CLK
clk => sda_out.CLK
clk => state[0].CLK
clk => state[1].CLK
clk => state[2].CLK
clk => state[3].CLK
rst_n => data_out[0]~reg0.ACLR
rst_n => data_out[1]~reg0.ACLR
rst_n => data_out[2]~reg0.ACLR
rst_n => data_out[3]~reg0.ACLR
rst_n => data_out[4]~reg0.ACLR
rst_n => data_out[5]~reg0.ACLR
rst_n => data_out[6]~reg0.ACLR
rst_n => data_out[7]~reg0.ACLR
rst_n => done~reg0.ACLR
rst_n => busy~reg0.ACLR
rst_n => sda_enable_master.PRESET
rst_n => sda_out.PRESET
rst_n => state[0].ACLR
rst_n => state[1].ACLR
rst_n => state[2].ACLR
rst_n => state[3].ACLR
rst_n => shift_reg[0].ENA
rst_n => bit_count[3].ENA
rst_n => bit_count[2].ENA
rst_n => bit_count[1].ENA
rst_n => bit_count[0].ENA
rst_n => shift_reg[7].ENA
rst_n => shift_reg[6].ENA
rst_n => shift_reg[5].ENA
rst_n => shift_reg[4].ENA
rst_n => shift_reg[3].ENA
rst_n => shift_reg[2].ENA
rst_n => shift_reg[1].ENA
start => state.OUTPUTSELECT
start => state.OUTPUTSELECT
start => state.OUTPUTSELECT
start => state.OUTPUTSELECT
start => Selector1.IN4
read_write => Mux17.IN3
read_write => state.DATAB
slave_addr[0] => Mux16.IN3
slave_addr[1] => Mux15.IN3
slave_addr[2] => Mux14.IN3
slave_addr[3] => Mux13.IN3
slave_addr[4] => Mux12.IN3
slave_addr[5] => Mux11.IN3
slave_addr[6] => Mux10.IN3
data_in[0] => shift_reg.DATAB
data_in[1] => shift_reg.DATAB
data_in[2] => shift_reg.DATAB
data_in[3] => shift_reg.DATAB
data_in[4] => shift_reg.DATAB
data_in[5] => shift_reg.DATAB
data_in[6] => shift_reg.DATAB
data_in[7] => shift_reg.DATAB
reg_addr[0] => ~NO_FANOUT~
reg_addr[1] => ~NO_FANOUT~
reg_addr[2] => ~NO_FANOUT~
reg_addr[3] => ~NO_FANOUT~
reg_addr[4] => ~NO_FANOUT~
reg_addr[5] => ~NO_FANOUT~
reg_addr[6] => ~NO_FANOUT~
data_out[0] <= data_out[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[1] <= data_out[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[2] <= data_out[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[3] <= data_out[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[4] <= data_out[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[5] <= data_out[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[6] <= data_out[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[7] <= data_out[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
busy <= busy~reg0.DB_MAX_OUTPUT_PORT_TYPE
done <= done~reg0.DB_MAX_OUTPUT_PORT_TYPE
scl <= scl.DB_MAX_OUTPUT_PORT_TYPE
sda <> sda
state_ind[0] <= state[0].DB_MAX_OUTPUT_PORT_TYPE
state_ind[1] <= state[1].DB_MAX_OUTPUT_PORT_TYPE
state_ind[2] <= state[2].DB_MAX_OUTPUT_PORT_TYPE
state_ind[3] <= state[3].DB_MAX_OUTPUT_PORT_TYPE


